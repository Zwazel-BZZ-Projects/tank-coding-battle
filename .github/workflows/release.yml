name: Build and Release Rust Application

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build_variant: server-linux
            os: ubuntu-latest
            build_cmd: "cargo brs"
            binary_dir: "target/server/release"
            binary_name: "tank-coding-battle"        # Linux binary (no extension)
            artifact_name: "tank-coding-battle_server_linux.zip"
            output_binary: "tank-coding-battle_server_linux"
          - build_variant: server-win
            os: windows-latest
            build_cmd: "cargo brs"
            binary_dir: "target\\server\\release"
            binary_name: "tank-coding-battle.exe"      # Windows binary (.exe)
            artifact_name: "tank-coding-battle_server_win.zip"
            output_binary: "tank-coding-battle_server_win.exe"
          - build_variant: client-win
            os: windows-latest
            build_cmd: "cargo brc"
            binary_dir: "target\\client\\release"
            binary_name: "tank-coding-battle.exe"      # Windows binary (.exe)
            artifact_name: "tank-coding-battle_client_win.zip"
            output_binary: "tank-coding-battle_client_win.exe"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo build output
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Build ${{ matrix.build_variant }}
        run: ${{ matrix.build_cmd }}

      - name: Package artifacts (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "Packaging ${{ matrix.build_variant }} for Linux..."
          mkdir release_artifact
          cp "${{ matrix.binary_dir }}/${{ matrix.binary_name }}" "release_artifact/${{ matrix.output_binary }}"
          cp -r assets release_artifact/
          zip -r "${{ matrix.artifact_name }}" release_artifact

      - name: Package artifacts (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Packaging $env:matrix_build_variant for Windows..."
          New-Item -ItemType Directory -Path release_artifact | Out-Null
          Copy-Item -Path "${{ matrix.binary_dir }}\\${{ matrix.binary_name }}" -Destination "release_artifact\\${{ matrix.output_binary }}"
          Copy-Item -Path "assets" -Destination "release_artifact\\assets" -Recurse
          Compress-Archive -Path release_artifact\* -DestinationPath "${{ matrix.artifact_name }}"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}
          
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download server-linux artifact
        uses: actions/download-artifact@v4
        with:
          name: tank-coding-battle_server_linux.zip
          path: .
          
      - name: Download server-win artifact
        uses: actions/download-artifact@v4
        with:
          name: tank-coding-battle_server_win.zip
          path: .
          
      - name: Download client-win artifact
        uses: actions/download-artifact@v4
        with:
          name: tank-coding-battle_client_win.zip
          path: .
          
      - name: Create GitHub Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref }}
          files: |
            tank-coding-battle_server_linux.zip
            tank-coding-battle_server_win.zip
            tank-coding-battle_client_win.zip
